import { Chess } from "./chess.js";
export class ZobistHash {
    //建構亂數所構成的 table
    //棋局是幾列？幾行？幾種狀態？
    constructor(rows, cols, kind) {
        this.table = []; //三維陣列！！！
        //create table
        this.table = [];
        for (let r = 0; r < rows; r++) {
            this.table.push([]);
            for (let c = 0; c < cols; c++) {
                this.table[r].push([]);
                for (let k = 0; k < kind; k++) {
                    this.table[r][c].push(bigRandomInt());
                } //for k
            } //for c
        } //for r
    }
    //若未放任何棋子時，此格默認填入0
    //初始盤面全部先填0，做 xor 運算後，整個 table 的 hash 值依舊為零 
    createGameHash(chessesPos) {
        let hash = 0; //整個 table 的 hash 值依舊為零   
        for (let i = 0; i < Chess.Total; i++) {
            let ch = Chess.getChess(i);
            let pos = chessesPos[i];
            hash ^= this.updateHash(pos.y, pos.x, ch.shapeType, hash);
        }
        return hash;
    }
    //更新 hash 值，(僅對單一儲存格做運算)
    updateHash(row, col, kind, hash) {
        return hash ^ this.table[row][col][kind];
    }
}
//產生 0~ 2^48 之間的整數亂數
function bigRandomInt() {
    const maxInt = Math.pow(2, 31);
    return Math.floor(Math.random() * maxInt);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9icmlzdEhhc2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvem9icmlzdEhhc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBSSxNQUFNLFlBQVksQ0FBQztBQUdyQyxNQUFNLE9BQU8sVUFBVTtJQUduQixnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLFlBQVksSUFBWSxFQUFFLElBQVksRUFBRSxJQUFZO1FBSnBELFVBQUssR0FBaUIsRUFBRSxDQUFDLENBQUcsU0FBUztRQU1qQyxjQUFjO1FBQ2QsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZCLEtBQUksSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQztvQkFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztnQkFDMUMsQ0FBQyxDQUFBLE9BQU87WUFDWixDQUFDLENBQUEsT0FBTztRQUNaLENBQUMsQ0FBQSxPQUFPO0lBQ1osQ0FBQztJQUdELGtCQUFrQjtJQUNsQiw0Q0FBNEM7SUFDNUMsY0FBYyxDQUFDLFVBQW1CO1FBQzlCLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFHLDBCQUEwQjtRQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ25DLElBQUksRUFBRSxHQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxHQUFHLEdBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsd0JBQXdCO0lBQ3hCLFVBQVUsQ0FBQyxHQUFVLEVBQUUsR0FBVSxFQUFFLElBQVcsRUFBRSxJQUFXO1FBQ3ZELE9BQU8sSUFBSSxHQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUVKO0FBR0Qsb0JBQW9CO0FBQ3BCLFNBQVMsWUFBWTtJQUNqQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQzlDLENBQUMifQ==